{"version":3,"sources":["components/JobPostingsDisplay.tsx","common/constants.ts","common/utils.ts","dal/services.ts","components/Jobpostings.tsx","common/AutoCompleteComponent.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.ts","components/JobpostingsDetails.tsx","index.tsx"],"names":["JobPostingsDisplay","props","state","this","jobPostings","index","name","city","location","countryName","key","className","data-test","node-info","node-index","React","Component","departmentMap","Map","set","populateMap","countryRegionDataList","countryRegionData","getCountryName","countryCode","countryNameObj","filter","v","countryShortCode","toLowerCase","fetchJobPostings","url","a","jobPostingsArr","fetch","res","json","response","content","forEach","country","departmentName","department","label","postingId","id","push","console","log","Jobpostings","handleClick","evt","target","elem","nodeInfo","getAttribute","setState","navigate","redirectUrl","error","isLoaded","prevProps","updateJobPostings","fetchJobPostingsForUI","getCountryCode","deptId","get","replace","then","catch","err","to","onClick","map","value","useStyles","makeStyles","theme","display","input","width","listbox","margin","padding","zIndex","position","listStyle","backgroundColor","palette","background","paper","overflow","maxHeight","border","color","cursor","AutoCompleteComponent","classes","componentType","placeHolder","useState","componentName","componentValue","textboxData","setTextBoxData","useEffect","handleChange","useAutocomplete","options","countryValues","departmentValues","getOptionLabel","option","title","getRootProps","getInputProps","getInputLabelProps","getListboxProps","getOptionProps","groupedOptions","onBlur","event","placeholder","length","getCountryValues","Dashboard","data","countryNameParams","departmentNameParams","applyFilter","App","Boolean","window","hostname","match","JobpostingDetails","navigateToJobPostingsPage","jobDescription","qualifications","fetchJobDetails","path","pathname","split","jobAd","sections","text","aria-hidden","ReactDOM","render","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.73d0b389.chunk.js","sourcesContent":["import React from 'react';\nimport { IJobDetails } from './Jobpostings';\nimport '../styles/dashboard.css';\n\nexport interface IJobPostingDisplayProps {\n      jobPostings: IJobDetails;\n      index: number;\n      value?: string;\n}\n\nexport interface IJobPostingDisplayState {\n\n}\n\nclass JobPostingsDisplay extends React.Component<IJobPostingDisplayProps, IJobPostingDisplayState> {\n      \n       constructor(props: IJobPostingDisplayProps, state: IJobPostingDisplayState) {\n             super(props);\n       }\n\n       render() {\n          let {jobPostings, index} = this.props;\n          let name = jobPostings.name;\n          let city = jobPostings.location.city;\n          let countryName = jobPostings.location.countryName;\n\n          return (\n      \n               <li key={index} className=\"jobPosting\" data-test=\"posting\">\n                                    <b data-test=\"posting-name\" className=\"cursor\" node-info=\"designation\" node-index={index}>{name}</b>\n                                    <p data-test=\"posting-location\" className=\"top\" node-info=\"designation\" node-index={index}>{city},{countryName}</p>\n                                    \n              </li>\n          \n        )\n       }\n}\n\nexport default JobPostingsDisplay;","export const posting_details_url = \"https://api.smartrecruiters.com/v1/companies/smartrecruiters/postings/{postingID}\";\nexport const job_postings_url = \"https://api.smartrecruiters.com/v1/companies/smartrecruiters/postings\";\n\n\nfunction populateMap() {\n    let departmentMap = new Map<string, string>();\n     departmentMap.set(\"Engineering\", \"18571\");\n     departmentMap.set(\"Product\", \"18588\");\n     departmentMap.set(\"Client Success\", \"18605\");\n    return departmentMap;\n}\n\nexport const departmentMap = populateMap();\n\n","import countryRegionData from 'country-region-data';\n\nexport interface regions {\n    name: string;\n    shortCode: string;\n}\n\nexport interface CountryRegionData {\n    countryName: string;\n    countryShortCode: string;\n    regions: regions[];\n}\n\nconst countryRegionDataList: CountryRegionData[] = countryRegionData;\n\n\nexport function getCountryCode(countryName: string ): string {\n\n     if(!countryName) {\n         return \"\";\n     }\n\n     const countryNameObj: CountryRegionData[] = countryRegionDataList.filter( v => v.countryName.toLowerCase() === countryName.toLowerCase());\n     if(countryNameObj) {\n         return countryNameObj[0].countryShortCode.toLowerCase();\n     }\n\n     else {\n         return \"\";\n     }\n\n}\n\nexport function getCountryName(countryCode: string): string {\n     \n     if(!countryCode) {\n         return \"\";\n     }\n     const countryNameObj: CountryRegionData[] = countryRegionDataList.filter( v => v.countryShortCode.toLowerCase() === countryCode.toLowerCase());\n     if(countryNameObj) {\n        return countryNameObj[0].countryName;\n    }\n\n     return \"\";\n}","import {IJobDetails, IResponse} from '../components/Jobpostings';\nimport {getCountryName} from '../common/utils';\n\nexport async function fetchJobPostings(url: string): Promise<IJobDetails[]> {\n   \n    const jobPostingsArr: IJobDetails[] = [];\n    try {\n        let res = await fetch(url);\n        let response: IResponse = await res.json();\n        const content: IJobDetails[] = response.content;\n        const jobPostingsArr: IJobDetails[] = [];\n        content.forEach( v => {\n             const countryCode = v.location.country;\n             const countryName = getCountryName(countryCode);\n             const city = v.location.city;\n             const departmentName = v.department.label;\n             const postingId = v.id;\n             jobPostingsArr.push({name: v.name, \n                   location: {country: countryCode, countryName: countryName, city: city},\n                   department: {label : departmentName},\n                   id: postingId\n                });\n        });\n\n        return jobPostingsArr;        \n     \n     }catch(err) {\n         console.log(\"Error occurred during fetching:\", err);\n     }\n\n    return jobPostingsArr;\n    \n}","import React from 'react';\nimport countryRegionData from 'country-region-data';\nimport JobPostingsDisplay from './JobPostingsDisplay';\nimport { Redirect } from 'react-router-dom';\nimport {departmentMap, job_postings_url} from '../common/constants';\nimport {getCountryCode, CountryRegionData} from '../common/utils';\nimport {fetchJobPostings} from '../dal/services'\n\nexport interface IJobPostingsProps {\n    countryName: string;\n    departmentName: string;\n}\n\nexport interface ILocation {\n     country: string;\n     countryName: string;\n     city: string;\n}\n\nexport interface IDepartment {\n     label: string;\n}\n\nexport interface IJobDetails{\n    name: string;\n    location: ILocation;\n    department: IDepartment;\n    id: string;\n}\n\nexport interface IJobPostingsState  {\n    error: string;\n    isLoaded: boolean;\n    jobPostings: IJobDetails[];\n    navigate: boolean;\n    redirectUrl: string;\n    countryRegionData: CountryRegionData[];\n}\n\nexport interface IResponse {\n    offset: number;\n    limit: number;\n    totalFound: number;\n    content:[];\n}\n\n\nclass Jobpostings extends React.Component<IJobPostingsProps, IJobPostingsState> {\n\n    constructor(props: IJobPostingsProps, state: IJobPostingsState) {\n           super(props);\n           this.state = {\n               error: \"\",\n               isLoaded: false,\n               jobPostings: [],\n               navigate: false,\n               redirectUrl: \"\",\n               countryRegionData: countryRegionData\n           }\n    }\n\n    componentDidUpdate(prevProps: IJobPostingsProps) {\n        if(prevProps !== this.props) {\n            this.updateJobPostings();\n        }\n    }\n\n    componentDidMount() {\n      this.fetchJobPostingsForUI();\n      let result = countryRegionData.filter( v => v.countryName === \"Germany\");\n    }\n\n     updateJobPostings() {\n        try{\n           let url = \"https://api.smartrecruiters.com/v1/companies/smartrecruiters/postings?country={country}&department={dept}\";\n           const {countryName, departmentName} = this.props;\n           const countryShortCode: string = getCountryCode(countryName);\n           const deptId: string = departmentMap.get(departmentName) || \"\";\n           url = url.replace(\"{country}\", countryShortCode);\n           url = url.replace(\"{dept}\", deptId);\n           console.log(\"Url is:\", url);\n           fetchJobPostings(url)\n             .then(v => this.setState({jobPostings: v}))\n             .catch(err => console.log(\"error occurred is:\", err));\n        }catch(err) {\n             console.log(\"Error is:\", err);\n        }\n    }\n\n     fetchJobPostingsForUI() {\n            let url = job_postings_url ;\n            fetchJobPostings(url)\n                .then(v => this.setState({jobPostings: v}))\n                .catch(err => console.log(\"error occurred is:\", err));\n     }\n\n     handleClick = (evt: any) => {\n         console.log(evt.target)\n         const elem = evt.target;\n         const nodeInfo = elem.getAttribute(\"node-info\");\n         console.log(\"Node info is:\", nodeInfo);\n         if(nodeInfo && nodeInfo === \"designation\") {\n               const index = elem.getAttribute(\"node-index\");\n               const jobPosting = this.state.jobPostings[index];\n               const postingId = jobPosting.id;\n               this.setState({navigate: true, redirectUrl: \"/jobdetails/\" + postingId});\n         }\n     }\n\n     render() {\n         let {jobPostings, navigate, redirectUrl} = this.state;\n         const jobPostingElem = \"jobPostingElem\"\n\n         if(navigate) {\n             return <Redirect to={redirectUrl} push={true} />\n         }\n\n         return (\n             <div onClick={this.handleClick}>\n                 {\n                     jobPostings.map( (v, index) => {\n                           return  <JobPostingsDisplay jobPostings={v} index={index} value={jobPostingElem} ></JobPostingsDisplay>\n                     })\n                 }\n             </div>\n         )\n     }\n}\n\nexport default Jobpostings;","import React from 'react';\nimport useAutocomplete from '@material-ui/lab/useAutocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport '../styles/dashboard.css';\nimport countryRegionData from 'country-region-data';\n\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n      display: 'block',\n    },\n    input: {\n      width: 200,\n    },\n    listbox: {\n      width: 200,\n      margin: 0,\n      padding: 0,\n      zIndex: 1,\n      position: 'absolute',\n      listStyle: 'none',\n      backgroundColor: theme.palette.background.paper,\n      overflow: 'auto',\n      maxHeight: 200,\n      border: '1px solid rgba(0,0,0,.25)',\n      '& li[data-focus=\"true\"]': {\n        backgroundColor: '#4a8df6',\n        color: 'white',\n        cursor: 'pointer',\n      },\n      '& li:active': {\n        backgroundColor: '#2977f5',\n        color: 'white',\n      },\n    },\n  }));\n  \n\nexport interface IOptions {\n    title: string;\n}\n\nexport interface IAutoCompleteProps {\n    handleChange(data: IAutoCompleteParams): void;\n    componentType: string;\n    placeHolder: string;\n}\n\nexport interface IAutoCompleteState {\n     \n}\n\nexport interface IAutoCompleteParams {\n     componentName: string;\n     componentValue: string;\n}\n\n\nexport const AutoCompleteComponent = (props: IAutoCompleteProps) => {\n    const classes = useStyles();\n    const {componentType, placeHolder} = props;\n    const [textboxData, setTextBoxData] = React.useState({componentName:'', componentValue:''})\n    const onTextChange = (event: any) => {\n        setTextBoxData({ ...textboxData, [event.target.name]: event.target.value, \"componentName\": componentType });\n    }\n    \n    React.useEffect(() => {\n        if (props.handleChange) {\n          console.log(\"Text box data is:\", textboxData)  \n          props.handleChange(textboxData)\n        }\n      }, [textboxData.componentName, textboxData.componentValue])\n    \n    const {\n        getRootProps,\n        getInputLabelProps,\n        getInputProps,\n        getListboxProps,\n        getOptionProps,\n        groupedOptions,\n      } = useAutocomplete({\n        id: 'use-autocomplete-demo',\n        options: (componentType === \"Country\") ? countryValues : departmentValues,\n        getOptionLabel: (option) => option.title,\n      });\n  \n     return (\n         <div>\n             <div {...getRootProps()}>\n              <input className={classes.input} {...getInputProps()} name=\"componentValue\" onBlur={onTextChange} placeholder={placeHolder} />\n            </div>\n            {groupedOptions.length > 0 ? (\n               <ul className={classes.listbox} {...getListboxProps()}>\n                 {groupedOptions.map((option, index) => (\n                    <li {...getOptionProps({ option, index })}>{option.title}</li>\n                  ))}\n              </ul>\n      ) : null}\n         </div>\n     )\n}\n\n\nconst countryValues: IOptions[] = getCountryValues();\n\nconst departmentValues: IOptions[] = [\n    {title: \"Product\"},\n    {title: \"Client Success\"},\n    {title: \"Engineering\"}\n]\n\nfunction getCountryValues() : IOptions[] {\n    const countryValues: IOptions[] = [];\n\n    console.log(\"Country region data:\", countryRegionData);\n    countryRegionData.forEach( v => {\n        countryValues.push({title: v.countryName});\n    })\n\n    return countryValues;\n}\n\n\n","import React from 'react';\nimport '../styles/dashboard.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport Jobpostings from './Jobpostings';\nimport 'react-dropdown/style.css';\nimport {AutoCompleteComponent, IAutoCompleteParams} from '../common/AutoCompleteComponent';\n\nexport interface IDashboardProps {\n\n}\nexport interface IDashboardState {\n    countryName: string;\n    departmentName: string;\n    countryNameParams: string;\n    departmentNameParams: string;\n}\n\nclass Dashboard extends React.Component<IDashboardProps, IDashboardState> {\n\n    constructor(props: IDashboardState, state: IDashboardState) {\n         super(props);\n         this.state = {\n             countryName: \"\",\n             departmentName: \"\",\n             countryNameParams: \"\",\n             departmentNameParams: \"\"\n         }\n    }\n\n    handleChange = (data: IAutoCompleteParams) => {\n        console.log(\"Data from Autocomplete component is:\", data);\n        let componentType = data.componentName;\n        let componentValue = data.componentValue;\n        if(componentType === \"Country\") {\n             this.setState({countryNameParams: componentValue});\n        }\n        else if(componentType === \"Department\") {\n            this.setState({departmentNameParams: componentValue});\n        }\n    }\n\n    applyFilter = () => {\n        const{countryNameParams, departmentNameParams} = this.state;\n        this.setState(\n            {countryName: countryNameParams, departmentName: departmentNameParams}\n        )\n    }\n\n\n    render() {\n        let {countryName, departmentName} = this.state;\n        return (\n            <div data-test=\"app\" className=\"dashboard\">\n                <br/>\n                <br/>\n                <div className=\"container\">\n                   <b>SmartRecruiters Postings List App</b>\n                   <br/>\n                   <br/>\n                   <div className=\"box\">\n                      <AutoCompleteComponent handleChange={this.handleChange} \n                        componentType=\"Country\" placeHolder=\"Country\"\n                      ></AutoCompleteComponent>\n                       &nbsp;&nbsp;&nbsp;&nbsp;\n                      <AutoCompleteComponent handleChange={this.handleChange}\n                        componentType=\"Department\" placeHolder=\"Department\"\n                      ></AutoCompleteComponent>\n                       &nbsp;&nbsp;&nbsp;&nbsp;\n                       <button onClick={this.applyFilter}>Filter List</button>\n                   </div>\n                   \n                   \n                   <br/>\n                   <br/>\n                   \n                   <Jobpostings countryName={countryName} departmentName={departmentName}></Jobpostings>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Dashboard;\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Dashboard></Dashboard>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport 'font-awesome/css/font-awesome.min.css';\nimport {posting_details_url} from '../common/constants';\nimport {Markup} from 'interweave';\nimport { Redirect } from 'react-router-dom';\nimport {getCountryName} from '../common/utils'\n\nexport interface IJobpostingDetailsProps {\n    \n}\n\nexport interface IJobpostingDetailsState {\n    jobDescription: string;\n    qualifications: string;\n    navigate: boolean;\n    name: string;\n    city: string;\n    country: string;\n}\n\n\nclass JobpostingDetails extends React.Component<IJobpostingDetailsProps, IJobpostingDetailsState> {\n\n    constructor(props: IJobpostingDetailsProps, state: IJobpostingDetailsState) {\n           super(props);\n           this.state = {\n              jobDescription: \"\",\n              qualifications: \"\",\n              navigate: false,\n              name: \"\",\n              city: \"\",\n              country: \"\"\n           }\n    }\n\n    componentDidMount() {\n       this.fetchJobDetails();\n    }\n\n    async fetchJobDetails() {\n         let url = posting_details_url;\n         let path = window.location.pathname;\n         let postingId = path.split(\"/\")[2];\n         url = url.replace(\"{postingID}\", postingId);\n         try {\n           let res = await fetch(url);\n           let response = await res.json();\n           let jobDescription = response.jobAd.sections.jobDescription.text;\n           const qualifications = response.jobAd.sections.qualifications.text;\n           const name = response.name;\n           const city = response.location.city;\n           const countryCode = response.location.country;\n           const country = getCountryName(countryCode);\n           this.setState({jobDescription: jobDescription, qualifications: qualifications, name: name, city: city, country: country});\n         }catch(err) {\n              console.log(\"Error occurred:\", err);\n         }\n\n    }\n\n    navigateToJobPostingsPage = () => {\n          this.setState({navigate: true});\n    }\n    \n    render() {\n        let {jobDescription, qualifications, navigate, name, city, country} = this.state;\n        if(navigate) {\n             return <Redirect to=\"/\" push={true} ></Redirect>\n        }\n\n        return(\n            <div className=\"dashboard\">\n                 <br/>\n                 <div className=\"container\">\n                     <p onClick={this.navigateToJobPostingsPage} className=\"cursor\" data-test=\"back\">\n                         <i className=\"fa fa-long-arrow-left\" aria-hidden=\"true\"></i> back to the list\n                      </p>\n                     <br/>\n                     <b data-test=\"posting-name\">{name}</b>\n                     <p data-test=\"posting-location\" className=\"top\">{city}, {country}</p>\n                     <br/>\n                     <b>Job Description</b>\n                     <div data-test=\"job-description\"><Markup  content = {jobDescription}/></div>\n                     <div data-test=\"job-qualifications\"> <Markup content = {qualifications}/></div>\n                  </div>   \n            </div>\n        )\n    }\n}\n\nexport default JobpostingDetails;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport JobpostingDetails from './components/JobpostingsDetails';\n\n\nReactDOM.render(\n       <Router>\n          <div>\n             <Switch>\n                 <Route path=\"/jobdetails/:id\" component={JobpostingDetails}/>\n                 <Route path=\"/\" component={App}/>\n             </Switch> \n          </div> \n        </Router>\n    ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}